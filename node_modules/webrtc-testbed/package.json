{
  "_args": [
    [
      {
        "raw": "webrtc-testbed@git+https://github.com/fippo/testbed.git",
        "scope": null,
        "escapedName": "webrtc-testbed",
        "name": "webrtc-testbed",
        "rawSpec": "git+https://github.com/fippo/testbed.git",
        "spec": "git+https://github.com/fippo/testbed.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:fippo/testbed.git",
          "sshUrl": "git+ssh://git@github.com/fippo/testbed.git",
          "httpsUrl": "git+https://github.com/fippo/testbed.git",
          "gitUrl": "git://github.com/fippo/testbed.git",
          "shortcut": "github:fippo/testbed",
          "directUrl": "https://raw.githubusercontent.com/fippo/testbed/master/package.json"
        }
      },
      "/Users/skaki/experiments/SimpleWebRTC"
    ]
  ],
  "_from": "git+https://github.com/fippo/testbed.git",
  "_id": "webrtc-testbed@0.0.1",
  "_inCache": true,
  "_location": "/webrtc-testbed",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webrtc-testbed@git+https://github.com/fippo/testbed.git",
    "scope": null,
    "escapedName": "webrtc-testbed",
    "name": "webrtc-testbed",
    "rawSpec": "git+https://github.com/fippo/testbed.git",
    "spec": "git+https://github.com/fippo/testbed.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:fippo/testbed.git",
      "sshUrl": "git+ssh://git@github.com/fippo/testbed.git",
      "httpsUrl": "git+https://github.com/fippo/testbed.git",
      "gitUrl": "git://github.com/fippo/testbed.git",
      "shortcut": "github:fippo/testbed",
      "directUrl": "https://raw.githubusercontent.com/fippo/testbed/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git+https://github.com/fippo/testbed.git#d24b015ae332c46d8483dd03441d1d15e935b5df",
  "_shasum": "4edeff70a111f59cfb3cb2f93a405a00f1f3e21e",
  "_shrinkwrap": null,
  "_spec": "webrtc-testbed@git+https://github.com/fippo/testbed.git",
  "_where": "/Users/skaki/experiments/SimpleWebRTC",
  "author": {
    "name": "Philipp Hancke",
    "email": "philipp.hancke@gmail.com"
  },
  "dependencies": {
    "chromedriver": "^77.0.0",
    "geckodriver": "^1.17.0",
    "selenium-webdriver": "^3.6.0",
    "travis-multirunner": "^4.5.0"
  },
  "description": "WebRTC interop testbed using apprtc",
  "devDependencies": {
    "sdp": "^1.5.0",
    "tape": "^4.6.3",
    "webrtc-adapter": "^6.0.4"
  },
  "gitHead": "d24b015ae332c46d8483dd03441d1d15e935b5df",
  "license": "BSD-3-Clause",
  "main": "apprtc.js",
  "name": "webrtc-testbed",
  "optionalDependencies": {},
  "readme": "# WebRTC interoperability tests\n## Why do we need interoperability tests?\nThe current state of interoperability testing for WebRTC is still mostly as described by two\nblog posts written by Google’s test engineer, Patrik Höglund in mid­2014\n[here](http://googletesting.blogspot.se/2014/08/chrome-firefox-webrtc-interop-test-pt-1.html) and \n[here](http://googletesting.blogspot.se/2014/09/chrome-firefox-webrtc-interop-test-pt-2.html).\n\nBasically, the testing process is using the [apprtc sample application](https://apprtc.appspot.com)\nin a hermetic environment on Linux to test interoperability with Firefox as part of the Chrome release process.\n\nOther notable examples include the work done by NTTs Yoshimasa Iwase who is running full\nfactorial tests including different NAT configurations ([described here](http://en.slideshare.net/iwashi86/extreme-testing-of-webrtc-applications)).\n\n\nYet, some breakages happen which are not detected by the testing process mentioned\nabove. For example, an upgrade to Chrome's DTLS library broke the interoperability with the\nJitsi Videobridge in January 2015. This was \n[noticed only very shortly](https://blog.andyet.com/2015/01/30/chrome-update-killed-the-webrtc-star/)\nbefore rolling out to all Chrome users.\n\nSimilar issues happened when Mozilla Firefox started to require Perfect Forward Secrecy for\nDTLS without announcing this change widely enough. This \n[broke interoperability](https://hacks.mozilla.org/2015/02/webrtc-requires-perfect-forward-secrecy-pfs-starting-in-firefox-38/)\nfor several mobile applications based on older versions of the webrtc.org library, including\nFacebook Messenger which forced Mozilla to postpone the upgrade for several weeks.\n\nMore recently, [SRTP between Firefox 49 and Edge was broken](https://bugzilla.mozilla.org/show_bug.cgi?id=1310061) (in one direction) which went unnoticed\nfor two weeks after Firefox 49 rolled out. And Video interop between Chrome Canary (M56) and Edge was broken in one direction as well due to \n[stricter validation of H264 profile level ids](https://bugs.chromium.org/p/webrtc/issues/detail?id=6552).\n\nMost of these issues have been noticed by people testing manually.\n\n## Acknowledgements\nSupport for this work was provided in part by the International Multimedia Telecommunications Consortium (IMTC) - http://www.imtc.org \nMany thanks to Bernard Aboba for making me start this!\n\n## Testing process\nThe testing process is based on the process used in [adapter.js](https://github.com/webrtc/adapter)\nand the [samples](https://github.com/webrtc/samples). It uses selenium and\n[webdriverjs](https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs) and tests are written using\n[tape](https://github.com/substack/tape).\n\n### Chrome\nH264 tests currently require Chrome 50 which adds H264 behind a flag.\n\n### Microsoft Edge\nThe tests for Microsoft Edge only run on Windows currently. The video tests require either the\ninsider version of Edge (which has H264 enabled by default or the TH2 release of Windows where\nH264 is available behind a flag).\n\n### Firefox \nFirefox uses a binary module from the OpenH264 project to provide H264 support. Typically, this\nmodule is downloaded by Firefox shortly after the creation of a new profile. Since Selenium\ncreates a new profile for each test, the binary needs to be provided in a template profile.\nSee [this README](h264profile/gmp-gmpopenh264/1.6) for details.\n\nVP9 can be enabled with a flag in Firefox. However, this is compatbile with Chrome only in Firefox 45+.\n\n## AppRTC tests\napprtc.js shows how to test the [AppRTC](https://appr.tc) example provided by Google.\nIt uses a number of URL parameters to tweak application behaviour, e.g. to force the VP9 or H264\nvideo codec.\nBoth ICE connectivity as well as video interoperability is tested. For the latter, the frame checker\nfrom [testRTC](https://github.com/webrtc/testrtc) is used.\n\n## Raw interop tests\nThere is a second set of tests which use plain HTML pages and adapter.js. \nThose tests emulate the PeerConnection API to some degree which makes them look very similar\nto some of the tests in adapter.js or the JSFiddles written by Mozilla's [Jan-Ivar](https://github.com/jan-ivar).\n\nTests currently include\n* audio interoperability tests working in Chrome, Microsoft Edge and Firefox\n* video interoperability tests in Chrome and Firefox, using VP8, VP9 and H264.\n* upgrade tests which upgrade an audio-only call to an audio-video call.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "start": "node video.js"
  },
  "version": "0.0.1"
}
